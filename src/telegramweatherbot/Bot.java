package telegramweatherbot;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.function.Function;
import org.telegram.telegrambots.ApiContextInitializer;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;
import telegramweatherbot.parsers.Case;
import telegramweatherbot.parsers.CurrentWeather;
import telegramweatherbot.parsers.HourlyForecast3Days;
import telegramweatherbot.parsers.HourlyForecastWeek;

public class Bot extends TelegramLongPollingBot {

    public HashMap<String, String> buttonIcons;

    private static final String API_KEY = "1946b0c3abfe50a3352de413456b55fd";
    HashMap<String, String> subscribes;
    HashSet<String> broadcast;
    Calendar c1;
    Calendar c2;
    Timer timer;
    boolean takeCity = false;
    boolean isChangeSettings = false;
    Function<String, String> getForecast;

    public static void main(String[] args) {
        ApiContextInitializer.init();

        TelegramBotsApi telegramBotsApi = new TelegramBotsApi();
        try {
            Bot bot = new Bot();
            bot.initBot();
            telegramBotsApi.registerBot(bot);
            bot.sendOn20();
            bot.sendOn9();

        } catch (TelegramApiRequestException e) {
        }

    }

    public void sendOn9() {
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                broadcast();
            }
        }, c1.getTime(), 86400000);
    }

    public void sendOn20() {
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                broadcast();
            }
        }, c2.getTime(), 86400000);
    }

    public void initBot() {
        buttonIcons = new HashMap<>() {
            {
                put("settings", "‚öô");
                put("subscribe", "üì•");
                put("unsubsribe", "üì§");
                put("cancel", "‚ùå");
                put("night", "");
                put("city", "üèô");
                put("broadcast", "üì®");
                put("current", "üìã");
                put("3days", "üåÖ");
                put("week", "üìÖ");
            }
        };
        subscribes = new HashMap<>();
        broadcast = new HashSet<>();

        //–í–´–ù–ï–°–¢–ò –í –û–¢–î–ï–õ–¨–ù–´–ô –ü–û–¢–û–ö
        c1 = Calendar.getInstance();
        c2 = Calendar.getInstance();
        timer = new Timer();

        c1.set(Calendar.HOUR_OF_DAY, 9);
        c1.set(Calendar.MINUTE, 26);
        c1.set(Calendar.SECOND, 00);

        c2.set(Calendar.HOUR_OF_DAY, 20);
        c2.set(Calendar.MINUTE, 00);
        c1.set(Calendar.SECOND, 00);
    }

    public String getWeatherWeek(String city) {
        return new HourlyForecastWeek(Case.toTitle(city), API_KEY).get();
    }

    public String getWeather3Days(String city) {
        return new HourlyForecast3Days(Case.toTitle(city), API_KEY).get();
    }

    public String getWeatherCurrent(String city) {
        return new CurrentWeather(Case.toTitle(city), API_KEY).get();
    }

    public void setLocation() {
    }

    @Override
    public String getBotToken() {
        return "1473191847:AAHgGFs1F9IPKPEJxJAfd0VQwZ0Ne9Rn9nk";
    }

    public void sendMsg(String chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(text);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
        }
    }

    public void sendSettings(Message message, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.enableMarkdown(true);
        sendMessage.setChatId(message.getChatId());
        sendMessage.setReplyToMessageId(message.getMessageId());
        sendMessage.setText(text);

        try {
            setSettingsKeyboard(sendMessage);
            execute(sendMessage);
        } catch (TelegramApiException e) {
        }
    }

    public void sendMsg(Message message, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.enableMarkdown(true);
        sendMessage.setChatId(message.getChatId());
        sendMessage.setReplyToMessageId(message.getMessageId());
        sendMessage.setText(text);

        try {
            setKeyboard(sendMessage);
            execute(sendMessage);
        } catch (TelegramApiException e) {
        }
    }

    private void setForecast(Message message, Function<String, String> forecast) {
        String chatId = message.getChatId().toString();
        if (!subscribes.containsKey(chatId)) {
            sendMsg(message, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.");
            getForecast = forecast;
        } else {
            sendMsg(message, forecast.apply(subscribes.get(chatId)));
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        Message message = update.getMessage();
        if (message != null && message.hasText()) {
            String text = message.getText();
            String chatId = message.getChatId().toString();
            text = text.replaceAll("[^\\p{L}\\p{N}\\p{P}\\p{Z}]", "").toLowerCase().strip();
            switch (text) {
                case "/help" -> sendMsg(message, "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?");
                case "/settings", "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏" -> {
                    if (subscribes.containsKey(chatId)) {
                        sendSettings(message, "–ß—Ç–æ –±—É–¥–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å?");
                        isChangeSettings = true;
                    } else {
                        sendMsg(message, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.");
                    }
                }
                case "—Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥" -> {
                    if (subscribes.containsKey(chatId)) {
                        sendMsg(message, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.");
                        isChangeSettings = true;
                    } else {
                        sendMsg(message, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!");
                    }
                }
                case "/start" -> sendMsg(message, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ü§© üëã\n–í–≤–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç –≥–æ—Ä–æ–¥ üèôÔ∏è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üì•, —É–∫–∞–∑–∞–≤ –≥–æ—Ä–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –¢–∞–∫–∂–µ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É üì®.");
                case "/subscribe", "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" -> {
                    if (!subscribes.containsKey(chatId)) {
                        subscribes.put(chatId, "–ú–æ—Å–∫–≤–∞");
                        getForecast = (city) -> getWeatherCurrent(city);
                        sendMsg(message, "–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –ø–æ –≥–æ—Ä–æ–¥—É –ú–æ—Å–∫–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ù–∞—Å—Ç—Ä–æ–π–∫–∏\" –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /settings.");
                    } else {
                        sendMsg(message, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!");
                    }
                }
                case "/unsubscribe", "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è" -> {
                    if (subscribes.containsKey(chatId)) {
                        subscribes.remove(chatId);
                        broadcast.remove(chatId);
                        sendMsg(message, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã.");
                    } else {
                        sendMsg(message, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!");
                    }
                }
                case "—Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞" -> setForecast(message, (String city) -> getWeatherCurrent(city));
                case "–ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" -> {
                    if (subscribes.containsKey(chatId)) {
                        broadcast.add(chatId);
                        sendMsg(message, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –≤ 9:00 –∏ –≤ 20:00 –ø–æ –ú–°–ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.");
                    } else {
                        sendMsg(message, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.");
                    }
                }
                case "–æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" -> {
                    if (broadcast.contains(chatId)) {
                        broadcast.remove(chatId);
                        sendMsg(message, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. ");
                    } else {
                        sendMsg(message, "–í—ã –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É.");
                    }
                }
                case "–ø–æ–≥–æ–¥–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è" -> setForecast(message, (String city) -> getWeather3Days(city));
                case "–ø–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é" -> setForecast(message, (String city) -> getWeatherWeek(city));
                
                default -> {
                    String weather;
                    if (getForecast != null) {
                        weather = getForecast.apply(text);
                    } else {
                        getForecast = (city) -> getWeatherCurrent(city);
                        weather = getForecast.apply(text);
                    }
                    if (!weather.equals("404")) {
                        if (isChangeSettings) {
                            subscribes.put(chatId, text);
                            sendMsg(message, "–ì–æ—Ä–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.");
                            isChangeSettings = false;
                        } else {
                            sendMsg(message, getForecast.apply(text));
                        }
                    } else {
                        sendMsg(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!");
                    }
                }
            }
        }
    }

    private ReplyKeyboardMarkup createKeyboard(SendMessage sendMessage, boolean selective, boolean resize, boolean oneTime) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        sendMessage.setReplyMarkup(replyKeyboardMarkup);
        replyKeyboardMarkup.setSelective(selective);
        replyKeyboardMarkup.setResizeKeyboard(resize);
        replyKeyboardMarkup.setOneTimeKeyboard(oneTime);

        sendMessage.setReplyMarkup(replyKeyboardMarkup);

        return replyKeyboardMarkup;
    }

    private void addRow(ReplyKeyboardMarkup keyboardMarkup, String[] buttons) {
        KeyboardRow keyboardRow = new KeyboardRow();
        for (String button : buttons) {
            KeyboardButton kb = new KeyboardButton();
            kb.setText(button);
            keyboardRow.add(kb);
        }
        keyboardMarkup.getKeyboard().add(keyboardRow);
    }

    private void addOneRowButtons(ReplyKeyboardMarkup keyboardMarkup, String[] buttons) {
        for (String button : buttons) {
            KeyboardRow keyboardRow = new KeyboardRow();
            KeyboardButton kb = new KeyboardButton();
            kb.setText(button);
            keyboardRow.add(kb);
            keyboardMarkup.getKeyboard().add(keyboardRow);
        }
    }

    private KeyboardRow addRow(ReplyKeyboardMarkup keyboardMarkup) {
        KeyboardRow keyboardRow = new KeyboardRow();
        keyboardMarkup.getKeyboard().add(keyboardRow);
        return keyboardRow;
    }

    private void setKeyboard(SendMessage sendMessage) {
        String chatId = sendMessage.getChatId();

        ReplyKeyboardMarkup replyKeyboardMarkup = createKeyboard(sendMessage, true, true, false);

        String[] buttons = {"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ " + buttonIcons.get("current"),
            "–ü–æ–≥–æ–¥–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è " + buttonIcons.get("3days"),
            "–ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é " + buttonIcons.get("week")};

        addOneRowButtons(replyKeyboardMarkup, buttons);
        KeyboardRow subscribe = addRow(replyKeyboardMarkup);
        KeyboardButton subButton = new KeyboardButton();

        if (!subscribes.containsKey(chatId)) {
            subButton.setText("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è " + buttonIcons.get("subscribe"));
        } else {
            KeyboardButton broadButton = new KeyboardButton();

            if (!broadcast.contains(chatId)) {
                subscribe.add(broadButton.setText("–ü–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É " + buttonIcons.get("broadcast")));
            } else {
                subscribe.add(broadButton.setText("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É " + buttonIcons.get("cancel")));
            }
            subscribe.add(new KeyboardButton().setText("–ù–∞—Å—Ç—Ä–æ–π–∫–∏Ô∏è " + buttonIcons.get("settings")));

            subButton.setText("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è " + buttonIcons.get("unsubsribe"));
        }
        subscribe.add(subButton);
    }

    public void setSettingsKeyboard(SendMessage sendMessage) {
        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        sendMessage.setReplyMarkup(replyKeyboardMarkup);
        replyKeyboardMarkup.setSelective(true);
        replyKeyboardMarkup.setResizeKeyboard(true);
        replyKeyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboardRowList = new ArrayList<>();
        KeyboardRow keyboardFirstRow = new KeyboardRow();
        KeyboardButton key = new KeyboardButton();

        key.setText("–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ " + buttonIcons.get("city"));

        keyboardFirstRow.add(key);
        keyboardRowList.add(keyboardFirstRow);
        replyKeyboardMarkup.setKeyboard(keyboardRowList);
    }

    public void broadcast() {
        broadcast.forEach(id -> {
            sendMsg(id, buttonIcons.get("broadcast") + getWeatherCurrent(subscribes.get(id)));
        });
    }

    @Override
    public String getBotUsername() {
        return "weather_uni_bot";
    }

}
